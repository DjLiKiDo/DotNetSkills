namespace DotNetSkills.Infrastructure.Persistence.Configurations;

/// <summary>
/// Base entity configuration for all entities that inherit from BaseEntity{TId}.
/// Provides common configuration patterns for audit fields, strongly-typed IDs, and optimistic concurrency.
/// </summary>
/// <typeparam name="TEntity">The entity type that must be an aggregate root.</typeparam>
/// <typeparam name="TId">The strongly-typed ID type that must implement IStronglyTypedId{Guid}.</typeparam>
public abstract class BaseEntityConfiguration<TEntity, TId> : IEntityTypeConfiguration<TEntity>
    where TEntity : AggregateRoot<TId>
    where TId : IStronglyTypedId<Guid>
{
    /// <summary>
    /// Configures the entity with common patterns for all entities.
    /// Override this method to add entity-specific configuration.
    /// </summary>
    /// <param name="builder">The entity type builder.</param>
    public virtual void Configure(EntityTypeBuilder<TEntity> builder)
    {
        // Configure primary key with strongly-typed ID conversion
        builder.HasKey(e => e.Id);
        ConfigureStronglyTypedId(builder);
        
        // Configure audit fields
        ConfigureAuditFields(builder);
        
        // Configure optimistic concurrency
        ConfigureOptimisticConcurrency(builder);
        
        // Configure domain events (ignored as they are not persisted)
        builder.Ignore(e => e.DomainEvents);
        
        // Call derived class configuration
        ConfigureEntity(builder);
    }
    
    /// <summary>
    /// Override this method to provide entity-specific configuration.
    /// </summary>
    /// <param name="builder">The entity type builder.</param>
    protected abstract void ConfigureEntity(EntityTypeBuilder<TEntity> builder);
    
    /// <summary>
    /// Configures strongly-typed ID conversion from the custom ID type to Guid.
    /// </summary>
    /// <param name="builder">The entity type builder.</param>
    protected virtual void ConfigureStronglyTypedId(EntityTypeBuilder<TEntity> builder)
    {
        builder.Property(e => e.Id)
            .HasConversion(
                id => id.Value,
                value => CreateIdFromGuid(value))
            .IsRequired()
            .ValueGeneratedNever(); // IDs are generated by the domain, not the database
    }
    
    /// <summary>
    /// Configures audit fields (CreatedAt, UpdatedAt, CreatedBy, UpdatedBy) with proper column types and constraints.
    /// </summary>
    /// <param name="builder">The entity type builder.</param>
    protected virtual void ConfigureAuditFields(EntityTypeBuilder<TEntity> builder)
    {
        builder.Property(e => e.CreatedAt)
            .IsRequired()
            .HasColumnType("datetime2(7)")
            .HasDefaultValueSql("GETUTCDATE()");
            
        builder.Property(e => e.UpdatedAt)
            .IsRequired()
            .HasColumnType("datetime2(7)")
            .HasDefaultValueSql("GETUTCDATE()");
            
        builder.Property(e => e.CreatedBy)
            .IsRequired(false)
            .HasColumnType("uniqueidentifier");
            
        builder.Property(e => e.UpdatedBy)
            .IsRequired(false)
            .HasColumnType("uniqueidentifier");
            
        // Create index on CreatedAt for performance (common query pattern)
        builder.HasIndex(e => e.CreatedAt)
            .HasDatabaseName($"IX_{typeof(TEntity).Name}_CreatedAt");
    }
    
    /// <summary>
    /// Configures optimistic concurrency control using row version.
    /// </summary>
    /// <param name="builder">The entity type builder.</param>
    protected virtual void ConfigureOptimisticConcurrency(EntityTypeBuilder<TEntity> builder)
    {
        // Use UpdatedAt as row version for optimistic concurrency
        builder.Property(e => e.UpdatedAt)
            .IsRowVersion();
    }
    
    /// <summary>
    /// Creates a strongly-typed ID from a Guid value.
    /// This method must be implemented by derived classes to provide the correct ID creation logic.
    /// </summary>
    /// <param name="value">The Guid value.</param>
    /// <returns>The strongly-typed ID instance.</returns>
    protected abstract TId CreateIdFromGuid(Guid value);
}
