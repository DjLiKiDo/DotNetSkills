// <auto-generated />
using System;
using DotNetSkills.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetSkills.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotNetSkills.Domain.ProjectManagement.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional detailed description of the project");

                    b.Property<DateTime?>("EndDate")
                        .HasPrecision(7)
                        .HasColumnType("datetime2")
                        .HasComment("The actual completion date of the project");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The display name of the project");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasPrecision(7)
                        .HasColumnType("datetime2")
                        .HasComment("The originally planned completion date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion")
                        .HasComment("SQL Server rowversion for optimistic concurrency");

                    b.Property<DateTime?>("StartDate")
                        .HasPrecision(7)
                        .HasColumnType("datetime2")
                        .HasComment("The actual start date of project work");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Current status of the project (Active, Completed, OnHold, Cancelled, Planning)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The ID of the team responsible for this project");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Project_CreatedAt");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Projects_Name_Unique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("PlannedEndDate")
                        .HasDatabaseName("IX_Projects_PlannedEndDate")
                        .HasFilter("[PlannedEndDate] IS NOT NULL");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_Projects_TeamId")
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.HasIndex("Status", "PlannedEndDate")
                        .HasDatabaseName("IX_Projects_Status_PlannedEndDate")
                        .HasFilter("[Status] IS NOT NULL");

                    b.HasIndex("Status", "TeamId")
                        .HasDatabaseName("IX_Projects_Status_TeamId")
                        .HasFilter("[Status] IS NOT NULL AND [TeamId] IS NOT NULL");

                    b.ToTable("Projects", "dbo", t =>
                        {
                            t.HasComment("Stores project information and metadata for the project management system");
                        });
                });

            modelBuilder.Entity("DotNetSkills.Domain.TaskExecution.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ActualHours")
                        .HasColumnType("int")
                        .HasComment("Actual effort in hours spent on the task (set when completed)");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The ID of the user assigned to this task (null if unassigned)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasPrecision(7)
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the task was completed");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Detailed description of the task requirements and goals");

                    b.Property<DateTime?>("DueDate")
                        .HasPrecision(7)
                        .HasColumnType("datetime2")
                        .HasComment("The target completion date for the task");

                    b.Property<int?>("EstimatedHours")
                        .HasColumnType("int")
                        .HasComment("Estimated effort in hours to complete the task");

                    b.Property<Guid?>("ParentTaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The ID of the parent task (null for top-level tasks)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Priority level of the task (Low, Medium, High, Critical)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The ID of the project this task belongs to");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion")
                        .HasComment("SQL Server rowversion for optimistic concurrency");

                    b.Property<DateTime?>("StartedAt")
                        .HasPrecision(7)
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when work on the task began");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Current status of the task (ToDo, InProgress, InReview, Done, Cancelled)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The title/name of the task");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId")
                        .HasDatabaseName("IX_Tasks_AssignedUserId")
                        .HasFilter("[AssignedUserId] IS NOT NULL");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Task_CreatedAt");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_Tasks_DueDate")
                        .HasFilter("[DueDate] IS NOT NULL");

                    b.HasIndex("ParentTaskId")
                        .HasDatabaseName("IX_Tasks_ParentTaskId")
                        .HasFilter("[ParentTaskId] IS NOT NULL");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_Tasks_ProjectId")
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Tasks_Title")
                        .HasFilter("[Title] IS NOT NULL");

                    b.HasIndex("AssignedUserId", "Status")
                        .HasDatabaseName("IX_Tasks_AssignedUserId_Status")
                        .HasFilter("[AssignedUserId] IS NOT NULL AND [Status] IS NOT NULL");

                    b.HasIndex("ProjectId", "Status")
                        .HasDatabaseName("IX_Tasks_ProjectId_Status")
                        .HasFilter("[ProjectId] IS NOT NULL AND [Status] IS NOT NULL");

                    b.HasIndex("Status", "DueDate")
                        .HasDatabaseName("IX_Tasks_Status_DueDate")
                        .HasFilter("[Status] IS NOT NULL");

                    b.HasIndex("Status", "Priority")
                        .HasDatabaseName("IX_Tasks_Status_Priority")
                        .HasFilter("[Status] IS NOT NULL AND [Priority] IS NOT NULL");

                    b.ToTable("Tasks", "dbo", t =>
                        {
                            t.HasComment("Stores task information with hierarchy support for project management");
                        });
                });

            modelBuilder.Entity("DotNetSkills.Domain.TeamCollaboration.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional team description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The team name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion")
                        .HasComment("SQL Server rowversion for optimistic concurrency");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Teams_CreatedAt");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Teams_Name_Unique");

                    b.ToTable("Teams", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_Teams_Name_MinLength", "LEN([Name]) >= 2");
                        });
                });

            modelBuilder.Entity("DotNetSkills.Domain.TeamCollaboration.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("The date and time when the user joined the team");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The role of the user within the team (Developer, ProjectManager, TeamLead, Viewer)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The ID of the team the user belongs to");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The ID of the user who is a member of the team");

                    b.HasKey("Id");

                    b.HasIndex("JoinedAt")
                        .HasDatabaseName("IX_TeamMembers_JoinedAt");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_TeamMembers_Role");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_TeamMembers_TeamId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_TeamMembers_UserId");

                    b.HasIndex("TeamId", "Role")
                        .HasDatabaseName("IX_TeamMembers_TeamId_Role");

                    b.HasIndex("UserId", "TeamId")
                        .IsUnique()
                        .HasDatabaseName("IX_TeamMembers_UserId_TeamId_Unique");

                    b.ToTable("TeamMembers", "dbo");
                });

            modelBuilder.Entity("DotNetSkills.Domain.UserManagement.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The user's full name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The user's role in the system (Admin, ProjectManager, Developer, Viewer)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion")
                        .HasComment("SQL Server rowversion for optimistic concurrency");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The user's current status (Active, Inactive, Suspended, Pending)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_User_CreatedAt");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Users_Name");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Users_Role");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Users_Status");

                    b.HasIndex("Role", "Status")
                        .HasDatabaseName("IX_Users_Role_Status");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("DotNetSkills.Domain.ProjectManagement.Entities.Project", b =>
                {
                    b.HasOne("DotNetSkills.Domain.TeamCollaboration.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Projects_Teams_TeamId");
                });

            modelBuilder.Entity("DotNetSkills.Domain.TaskExecution.Entities.Task", b =>
                {
                    b.HasOne("DotNetSkills.Domain.UserManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Tasks_Users_AssignedUser");

                    b.HasOne("DotNetSkills.Domain.TaskExecution.Entities.Task", null)
                        .WithMany("Subtasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Tasks_Tasks_Parent");

                    b.HasOne("DotNetSkills.Domain.ProjectManagement.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Projects");
                });

            modelBuilder.Entity("DotNetSkills.Domain.TeamCollaboration.Entities.TeamMember", b =>
                {
                    b.HasOne("DotNetSkills.Domain.TeamCollaboration.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TeamMembers_Teams_TeamId");

                    b.HasOne("DotNetSkills.Domain.UserManagement.Entities.User", "User")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TeamMembers_Users_UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetSkills.Domain.UserManagement.Entities.User", b =>
                {
                    b.OwnsOne("DotNetSkills.Domain.UserManagement.ValueObjects.EmailAddress", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(254)
                                .HasColumnType("nvarchar(254)")
                                .HasColumnName("Email")
                                .HasComment("The user's email address");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_Email_Unique");

                            b1.ToTable("Users", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("DotNetSkills.Domain.TaskExecution.Entities.Task", b =>
                {
                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("DotNetSkills.Domain.TeamCollaboration.Entities.Team", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("DotNetSkills.Domain.UserManagement.Entities.User", b =>
                {
                    b.Navigation("TeamMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
